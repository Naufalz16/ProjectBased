# -*- coding: utf-8 -*-
"""ProjectBase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UsBB2HKeRI8ktJ6WqSusmLzS_WOxKAP1
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

url = 'https://raw.githubusercontent.com/abiddarmawan/ProjectBase/main/autos_mpg.csv'
df = pd.read_csv(url)

df

print(df.head())

print(df.dtypes)

df = df.drop(["car_name"],axis=1)

df = df.replace('?', np.nan)

print(df.isnull().sum())

df = df.astype(float)

for column_name in df:
  df[column_name] = df[column_name].fillna(df[column_name].mean())

plt.figure(figsize=(15,10))
sns.heatmap(df.corr(), center=0, annot=True)
plt.title("Korelasi Data")
plt.savefig("heatmap.png")
plt.show()

#fitur pertama yang digunakan
X = df[['horsepower', 'weight', 'origin']]
y = df['mpg']

#fitur yang kedua yang digunakan
X = df[['acceleration', 'displacement']]
y = df['mpg']

#fitur yang ketiga digunakan
X = df[['cylinders','model_year','origin']]
y = df['mpg']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#menetapkan jumlah model yang akan digunakan sebanyak 10 model
i = 10

#membuat list kosong yang nantinya akan digunakan untuk menyimpan prediksi masing-masing model 
predictions = []

for i in range(i):
    # mengambil subset secara acak dari data X_train dengan ukuran sebesar (len(X_train))
    subset_index = np.random.randint(low=0, high=len(X_train), size=len(X_train)) #memilih fitur mana yang akan dipilih pada cabang.
   
    X_subset = X_train.iloc[subset_index]#memasukan fitur
    y_subset = y_train.iloc[subset_index]#memasukan fitur 
    
    # membuat decisiontreeregressor
    model = DecisionTreeRegressor(random_state=42)
    model.fit(X_subset, y_subset)#menggunakan model
    
    # menggunakan model yang sudah dibuat untuk memprediksi data test
    y_pred = model.predict(X_test) 
    
    # menambahkan prediksi dari model ke list 
    predictions.append(y_pred)

#mengambil nilai rata-rata dari semua prediksi yang tersimpan di dalam list'predictions'.
y_pred = np.mean(predictions, axis=0)

from sklearn.metrics import mean_squared_error

# menghitung mse
 # y_test yang merupakan target dari data test
 #y_pred yang merupakan hasil prediksi dari model
mse = mean_squared_error(y_test, y_pred)

# Print the MSE
print(mse)

score = model.score(X_test, y_test)
print(f"Test score: {score:.2f}")

